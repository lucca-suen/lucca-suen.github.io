<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue单页快速开发笔记</title>
    <url>/2022/11/15/Vue%E5%8D%95%E9%A1%B5%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对前端以及Vue了解不多，记录了下如何快速搭建一个常见单页网站的基本框架。</p>
<p>还有使用中的一些比较通用的模块。</p>
<span id="more"></span>



<h2 id="项目文件结构"><a href="#项目文件结构" class="headerlink" title="项目文件结构"></a>项目文件结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project</span><br><span class="line"> ├── node_modules			// 依赖</span><br><span class="line"> ├── public					// favicon 和 index.html</span><br><span class="line"> ├── src</span><br><span class="line"> │   ├── assets				// 资源 (images：存一些图片, script：存一些js脚本)</span><br><span class="line"> │   ├── components			// 组件 (通用组件抽象)</span><br><span class="line"> │   ├── router				// vue-router 路由 (index.js配置路由)</span><br><span class="line"> │   ├── store				// vuex 状态存储 (index.js记录vuex存储的状态)</span><br><span class="line"> │   ├── views				// 页面</span><br><span class="line"> │   ├── App.vue			// 主页面</span><br><span class="line"> │   └── main.js			// 主函数</span><br><span class="line"> ├── babel.config.js		// 以下配置文件多数情况不用修改，现用现查</span><br><span class="line"> ├── jsconfig.json</span><br><span class="line"> ├── package-lock.json</span><br><span class="line"> ├── package.json</span><br><span class="line"> └── vue.config.js</span><br></pre></td></tr></table></figure>

<p>以下所有文件路径中@表示项目根路径</p>
<h2 id="基础框架搭建"><a href="#基础框架搭建" class="headerlink" title="基础框架搭建"></a>基础框架搭建</h2><ol>
<li><p>设计整体布局（单页，可复用）</p>
</li>
<li><p><code>@/components</code> 下创建 NavBar 组件（顶部导航栏）</p>
<ul>
<li>BootStrap 有现成的 NavBar</li>
<li>自定义编写结构和样式</li>
<li>实现点击后高亮：<ul>
<li>使用 vue-route 的 useRoute </li>
<li>setup -&gt; routeName = compute(() =&gt; route.name) –&gt; return { routeName }</li>
<li>template 使用 <code>:class=&quot;routeName == xxx ? &#39;高亮样式&#39; : &#39;未高亮样式&#39; &quot;</code></li>
</ul>
</li>
</ul>
</li>
<li><p><code>App.vue</code> 导入并使用 NavBar 组件</p>
<ol>
<li>import NavBar from “@/components/NavBar.vue”;</li>
<li>components: NavBar</li>
<li>template 使用   <code>&lt;NavBar&gt;&lt;/NavBar&gt;</code></li>
</ol>
</li>
<li><p><code>@/views</code> 创建页面 xxx.vue</p>
<ul>
<li>分好文件夹，方便后期开发</li>
<li>有几个模块就重复几次</li>
</ul>
</li>
<li><p><code>@/router/index.js</code> 配置路由</p>
<ul>
<li><p>path、name、components（需要提前 import xxx.vue ）</p>
</li>
<li><p>redirect：重定向</p>
<ul>
<li>根目录：’/‘</li>
<li>不合法网页：’/:catchAll(.*)’</li>
</ul>
</li>
<li><p>vue.before</p>
</li>
</ul>
</li>
<li><p><code>@/components</code> 下创建 ContentField 组件（主页内容框）</p>
<ul>
<li>BootStrap 有现成的 Card 组件</li>
<li>使用 <code>div.container&gt;div.card&gt;card-body&gt;</code> 快速生成 </li>
<li><code>&lt;slot&gt;&lt;/slot&gt;</code>  预留插槽显示对应模块的内容</li>
<li>自定义样式</li>
</ul>
</li>
<li><p>在每一页中都使用 ContentField 组件：import -&gt; components -&gt; template 使用 &lt;组件名&gt;&lt;/组件名&gt;</p>
</li>
</ol>
<h2 id="常用公共模块"><a href="#常用公共模块" class="headerlink" title="常用公共模块"></a>常用公共模块</h2><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><p>路由组件，负责解析你输入的路径并返回给指定的页面。</p>
<p>主要在<code>@/router/index.js</code>下编写路由组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入创建路由需要使用的组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 导入要路由的vue页面</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">XXView</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/modelA/XXView&#x27;</span></span><br><span class="line"><span class="comment">// 用作权限控制，状态判断（登录态等）</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,			<span class="comment">// 路径</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>,		<span class="comment">// 名字</span></span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&quot;/pk/&quot;</span>,	<span class="comment">// 重定向</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/pagepath/&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;pk_index&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">PKIndexView</span>,	<span class="comment">// 实际组件</span></span><br><span class="line">    <span class="attr">meta</span>: &#123;					<span class="comment">// 额外定义的附带数据（如是否验证登录态）</span></span><br><span class="line">      <span class="attr">requestAuth</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/404/&quot;</span>,			<span class="comment">// 404页面</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;404&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">NotFound</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">requestAuth</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/:catchAll(.*)&quot;</span>,	<span class="comment">// 拦截其他不合法的路径</span></span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&quot;/404/&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 真正创建路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次请求前执行，这里用作登录态判断</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (登录态条件) &#123;</span><br><span class="line">    <span class="comment">// 跳转到登录页面</span></span><br><span class="line">    <span class="title function_">next</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;登录页面的name&#x27;</span>&#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出才能背其他组件所使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>



<h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><p>全局状态记录组件，一般用来记录一些需要在全局使用的状态变量。</p>
<p>除了变量，他还封装了一些函数用来操作这些变量，详见代码。</p>
<p>主要在<code>@/vuex/index.js</code>下编写状态记录</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ModuleUser</span> <span class="keyword">from</span> <span class="string">&#x27;./user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;&#125;,		<span class="comment">// 暂时没用上</span></span><br><span class="line">  <span class="attr">mutations</span>: &#123;&#125;,	<span class="comment">// 同步函数集合，在外部需要使用store.commit(&#x27;函数名&#x27;, 入参)来调用</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,		<span class="comment">// 异步函数集合，在外部需要使用store.dispatch(&#x27;函数名&#x27;, 入参)来调用</span></span><br><span class="line">  <span class="attr">modules</span>: &#123;		<span class="comment">// 编写一些子模块，放在这里统一管理</span></span><br><span class="line">    <span class="attr">user</span>: <span class="title class_">ModuleUser</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">updateUser</span>(<span class="params">state, user</span>) &#123;</span><br><span class="line">            state.<span class="property">id</span> = user.<span class="property">id</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">updateToken</span>(<span class="params">state, token</span>) &#123;</span><br><span class="line">            state.<span class="property">token</span> = token;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">logout</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            state.<span class="property">id</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">login</span>(<span class="params">context, data</span>) &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&quot;updateToken&quot;</span>, res.<span class="property">token</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">getinfo</span>(<span class="params">context, data</span>) &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&quot;updateUser&quot;</span>, &#123;</span><br><span class="line">                ...res,</span><br><span class="line">                <span class="attr">is_login</span>: <span class="literal">true</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">logout</span>(<span class="params">context</span>) &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&quot;logout&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Web应用上线全流程</title>
    <url>/2022/11/22/Web%E5%BA%94%E7%94%A8%E4%B8%8A%E7%BA%BF%E5%85%A8%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习项目的时候，发现了一套相对完整好用的Web应用上线流程。</p>
<p>记录下来方便以后直接copy~</p>
<span id="more"></span>



<h2 id="编写一个完整的Web项目"><a href="#编写一个完整的Web项目" class="headerlink" title="编写一个完整的Web项目"></a>编写一个完整的Web项目</h2><p>上线和本地测试有所不同，要自己检查好有关网络映射相关的代码。</p>
<h2 id="购买云服务器"><a href="#购买云服务器" class="headerlink" title="购买云服务器"></a>购买云服务器</h2><p>有条件也可以自己搭建一台服务器，但是只推荐用来学习，不推荐用来实际使用。</p>
<p>因为有很多细节问题打磨的没有云服务厂商好。</p>
<p>国内常见云服务厂商有以下三个：</p>
<ul>
<li>腾讯云</li>
<li>阿里云</li>
<li>华为云</li>
</ul>
<p>1核2G基本够搭一个常见的Web应用、2核4G更好。</p>
<p>注意：购买的服务器需要带有公网IP，方便后期外网访问、配置域名和HTTPS等等。</p>
<h2 id="添加用户及权限"><a href="#添加用户及权限" class="headerlink" title="添加用户及权限"></a>添加用户及权限</h2><ul>
<li>root权限太大，不安全，创建使用普通用户</li>
<li><code>useradd &lt;username&gt; </code>创建用户</li>
<li>给用户添加root权限<ul>
<li>CentOS: <code>visudo</code>，于92行附近，添加<code>&lt;username&gt; ALL=(ALL) NOPASSWD:ALL</code></li>
<li>Ubuntu: <code>sudo usermod -aG sudo &lt;username&gt;</code> </li>
</ul>
</li>
</ul>
<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><ul>
<li><p>照着官网复制命令</p>
</li>
<li><p>如果是Ubuntu，不是root用户</p>
<ul>
<li>需要登录指定用户</li>
<li>使用命令 <code>sudo usermod -aG docker $USER</code></li>
</ul>
</li>
<li><p>使用基础镜像创建实例容器（包含一些基础设施：linux、mysql、jdk等）</p>
<p>  <code>docker load -i &lt;镜像文件名&gt;</code></p>
</li>
<li><p><code>docker run -p &lt;应用端口&gt;:&lt;实际端口&gt; --name &lt;实例名&gt; -itd &lt;镜像名&gt;</code></p>
</li>
<li><p>接下来的所有设施都在容器里搭建</p>
</li>
<li><p>上述流程也可用 DockerFile 或 docker-compose 的方式解决，感兴趣可以自行了解。</p>
</li>
</ul>
<h2 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h2><h3 id="①-mysql"><a href="#①-mysql" class="headerlink" title="① mysql"></a>① mysql</h3><ul>
<li><p>更新源：<code>sudo apt-get update</code></p>
</li>
<li><p>安装：<code>sudo apt-get install mysql-server</code></p>
</li>
<li><p>权限：<code>sudo usermod -d /var/lib/mysql/ mysql</code></p>
</li>
<li><p>启动：<code>sudo service mysql start</code></p>
</li>
<li><p>进入mysql，改密码：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set password for &#x27;root&#x27;@&#x27;localhost&#x27; =password(&#x27;&lt;你的密码&gt;&#x27;);</span><br><span class="line"></span><br><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;&lt;你的密码&gt;*.&#x27;;</span><br><span class="line"></span><br><span class="line">flush privileges ;</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></figure></li>
<li><p>建表</p>
</li>
</ul>
<h3 id="②-JDK"><a href="#②-JDK" class="headerlink" title="② JDK"></a>② JDK</h3><ul>
<li><code>sudo apt-get install openjdk-8-jdk</code></li>
</ul>
<h2 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h2><h3 id="后端打包"><a href="#后端打包" class="headerlink" title="后端打包"></a>后端打包</h3><p>配置项目的pom.xml，否则会报错</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这里写上main方法所在类的路径--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>con.xxx.你的主类名<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>maven clean -&gt; package 上传 jar 包</p>
<h3 id="前端打包"><a href="#前端打包" class="headerlink" title="前端打包"></a>前端打包</h3><ul>
<li><p>配置请求的域名，否则客户端访问不到，因为客户端代码是加载到用户机器上执行的。</p>
<p>  127.0.0.1 / localhost / 内网IP 修改为 实际IP 或 域名</p>
</li>
<li><p>如果配置了https，需要改为https协议，websocket要从ws改为wss</p>
</li>
<li><p>将代码打包<code>npm run build</code>生成dist文件夹，里面是所有的静态资源</p>
</li>
<li><p>把静态资源放到nginx中配置好的映射文件夹下面</p>
</li>
</ul>
<h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><ul>
<li>/etc/nginx/nginx.conf</li>
<li>前后端部署在一台机器上</li>
<li>带https</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span> www-data;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"><span class="attribute">include</span> /etc/nginx/modules-enabled/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">768</span>;</span><br><span class="line">    <span class="comment"># multi_accept on;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">types_hash_max_size</span> <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>; <span class="comment"># Dropping SSLv3, ref: POODLE</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/access.log;</span><br><span class="line">    <span class="attribute">error_log</span> /var/log/nginx/<span class="literal">error</span>.log;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/sites-enabled/*;</span><br><span class="line"></span><br><span class="line">     <span class="section">server</span> &#123;</span><br><span class="line">         <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">         <span class="attribute">server_name</span> xxx.com;	<span class="comment"># 你的域名</span></span><br><span class="line">         <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> https://<span class="variable">$&#123;server_name&#125;</span><span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">server_name</span> xxx.com;	<span class="comment"># 你的域名</span></span><br><span class="line">        <span class="attribute">ssl_certificate</span>   cert/xxx.pem;	<span class="comment"># HTTPS pem文件</span></span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  cert/xxx.key; <span class="comment"># HTTPS key文件</span></span><br><span class="line">        <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">        <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">        <span class="attribute">access_log</span> /var/log/nginx/access.log;</span><br><span class="line">        <span class="attribute">error_log</span> /var/log/nginx/<span class="literal">error</span>.log;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">client_max_body_size</span> <span class="number">10M</span>;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /api &#123;	<span class="comment"># /api可以自定义</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:后端端口号;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /websocket &#123;	<span class="comment"># /websocket 可以自定义</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:后端端口号;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">            <span class="attribute">proxy_read_timeout</span>  <span class="number">36000s</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span> /前端资源路径;</span><br><span class="line">            <span class="attribute">index</span> index.html;</span><br><span class="line">            <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>部署运维</tag>
      </tags>
  </entry>
  <entry>
    <title>SkyWalking部署流程</title>
    <url>/2022/11/16/SkyWalking%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>项目中使用了Skywalking，记录下skywalking的部署流程，方便后续使用。</p>
<span id="more"></span>



<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>SkyWalking 架构图</p>
<p><img src="https://files.catbox.moe/xxdu5z.png"></p>
<p>整个架构分成四部分：</p>
<p>1、上部分Agent ：负责从应用中，收集链路信息，发送给 SkyWalking OAP 服务器；</p>
<p>2、下部分 SkyWalking OAP ：负责接收Agent发送的Tracing数据信息，然后进行分析(Analysis Core)，存储到外部存储器(Storage)，最终提供查询(Query)功能；</p>
<p>3、右部分Storage：Tracing数据存储，目前支持ES、MySQL、Sharding Sphere、TiDB、H2多种存储器，目前采用较多的是ES，主要考虑是SkyWalking开发团队自己的生产环境采用ES为主；</p>
<p>4、左部分SkyWalking UI：负责提供控台，查看链路等等；</p>
<!--More-->

<h2 id="单机版（使用h2内置数据库）"><a href="#单机版（使用h2内置数据库）" class="headerlink" title="单机版（使用h2内置数据库）"></a>单机版（使用h2内置数据库）</h2><h3 id="步骤分解"><a href="#步骤分解" class="headerlink" title="步骤分解"></a>步骤分解</h3><blockquote>
<ol>
<li>下载SkyWalking软件包</li>
<li>搭建一个SkyWalking OAP 和 SkyWalking UI服务</li>
<li>启动一个Spring Boot 应用，并配置SkyWalking Agent</li>
</ol>
</blockquote>
<h3 id="下载官方包（不介绍手动编译）"><a href="#下载官方包（不介绍手动编译）" class="headerlink" title="下载官方包（不介绍手动编译）"></a>下载官方包（不介绍手动编译）</h3><p>尾缀带es的表示支持es，版本自行选择</p>
<h3 id="SktWalking-OAP搭建"><a href="#SktWalking-OAP搭建" class="headerlink" title="SktWalking OAP搭建"></a>SktWalking OAP搭建</h3><p>解压:（tar -zxvf xxxxx.tar.gz）</p>
<p>存放到指定位置</p>
<blockquote>
<p>agent         #SkyWalking Agent</p>
<p>bin             #执行脚本</p>
<p>config        #SkyWalking OAP Server 配置文件</p>
<p>LICENSE</p>
<p>licenses</p>
<p>NOTICE</p>
<p>oap-libs     #SkyWalking OAP Server（后面可以在这导入数据库驱动）</p>
<p>README.txt</p>
<p>tools</p>
<p>webapp     #SkyWalking UI</p>
</blockquote>
<h3 id="启动-SkyWalking-OAP服务"><a href="#启动-SkyWalking-OAP服务" class="headerlink" title="启动 SkyWalking OAP服务"></a>启动 SkyWalking OAP服务</h3><p>进入到对应文件夹下bin目录：./startup.sh</p>
<p>打开该脚本发现对应脚本同时打开 oapservice.sh（skywalking-oap-server） 和 webapp.sh（skywalking-web-ui）</p>
<p>换言之，可以单独启动（后面集群配置用得到）</p>
<p>可以查看 log 目录下日志文件</p>
<p>（以下端口参数皆可修改）</p>
<p>skywalking-oap-server服务启动后会占用：11800 和 12800 两个端口；（可以在 config/application.yml  修改，这个文件里面存放 skywalking 配置，包括后面数据库修改）</p>
<p>skywalking-web-ui服务会占用 8080 端口（可以在 webapp/webapp.yml 修改，这个配置文件可以修改ui界面的配置，后面集群配置用的到）</p>
<blockquote>
<p>server.port：SkyWalking UI服务端口，默认是8080；<br>collector.ribbon.listOfServers：SkyWalking OAP服务地址数组，SkyWalking UI界面的数据是通过请求SkyWalking OAP服务来获得（后面集群配置用的到）</p>
</blockquote>
<h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><h4 id="Jar包"><a href="#Jar包" class="headerlink" title="Jar包"></a>Jar包</h4><ol>
<li><p>在启动程序前加一个-javaagent 参数也可完成对程序的跟踪；</p>
</li>
<li><p>编写shell脚本</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SkyWalking Agent配置</span></span><br><span class="line">export SW_AGENT_NAME=11-springboot #Agent名字,一般使用`spring.application.name` </span><br><span class="line">export SW_AGENT_COLLECTOR_BACKEND_SERVICES=127.0.0.1:11800 #配置 Collector 地址。</span><br><span class="line">export SW_AGENT_SPAN_LIMIT=2000 #配置链路的最大Span数量，默认为 300。</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 skywalking 探针</span></span><br><span class="line">export JAVA_AGENT=-javaagent:/usr/local/apache-skywalking-apm-bin/agent/skywalking-agent.jar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">jar启动</span></span><br><span class="line">java $JAVA_AGENT -jar 11-springboot-1.0.0.jar</span><br></pre></td></tr></table></figure>



<h4 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h4><p><img src="https://files.catbox.moe/v3rr8j.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-javaagent:D:/DevOps/apache-skywalking-apm-bin/agent/skywalking-agent.jar=agent.service_name=diandian-starter,collector.backend_service=82.157.140.94:11800,plugin.toolkit.log.grpc.reporter.server_host=82.157.140.94,plugin.toolkit.log.grpc.reporter.server_port=11800</span><br><span class="line"></span><br><span class="line">SW_AGENT_COLLECTOR_BACKEND_SERVICES=82.157.140.94:11800;SW_AGENT_NAME=diandian-starter</span><br></pre></td></tr></table></figure>





<h2 id="集成外部数据库（mysql）"><a href="#集成外部数据库（mysql）" class="headerlink" title="集成外部数据库（mysql）"></a>集成外部数据库（mysql）</h2><p>修改 config/application.yml 文件，将 storage 设置为 mysql</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="string">$&#123;SW_STORAGE:mysql&#125;</span></span><br></pre></td></tr></table></figure>

<p>填写 mysql 用户名密码</p>
<p>按照单机版启动即可</p>
<h2 id="集群版"><a href="#集群版" class="headerlink" title="集群版"></a>集群版</h2><p>由于skywalking只是负责监控程序，进行分布式链路跟踪的，所以skywalking OAP如果宕机了，完全不会影响正常业务。</p>
<p>Skywalking 集群式将SkyWalking oap作为一个服务注册到 nacos（或其他注册中心，这里不做描述） 上。</p>
<p>只要skywalking没有全部宕机，保证有一个skywalking oap在运行，就能继续运行</p>
<h3 id="准备前提"><a href="#准备前提" class="headerlink" title="准备前提"></a>准备前提</h3><blockquote>
<ol>
<li>一个Nacos 或 集群</li>
<li>一个数据库（mysql）或集群</li>
<li>两个以上的 skywalking oap</li>
<li>一个UI 或 集群</li>
</ol>
</blockquote>
<h3 id="步骤分解-1"><a href="#步骤分解-1" class="headerlink" title="步骤分解"></a>步骤分解</h3><blockquote>
<ol>
<li>解压两份以上 skywalking</li>
<li>修改 application.yml 文件</li>
<li>配置 UI（webapp.yml）</li>
<li>wkywalking 启动</li>
<li>程序启动</li>
</ol>
</blockquote>
<h3 id="1-解压两份skywalking"><a href="#1-解压两份skywalking" class="headerlink" title="1.解压两份skywalking"></a>1.解压两份skywalking</h3><h3 id="2-修改-application-yml-文件"><a href="#2-修改-application-yml-文件" class="headerlink" title="2.修改 application.yml 文件"></a>2.修改 application.yml 文件</h3><p>/config/application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster:</span></span><br><span class="line">  	<span class="attr">selector:</span> <span class="string">$&#123;SW_CLUSTER:nacos&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nacos:</span> </span><br><span class="line">	<span class="attr">serviceName:</span> <span class="string">$&#123;SW_SERVICE_NAME:&quot;SkyWalking_OAP_Cluster&quot;&#125;</span> </span><br><span class="line">	<span class="attr">hostPort:</span> <span class="string">$&#123;SW_CLUSTER_NACOS_HOST_PORT:localhost:8848&#125;</span></span><br></pre></td></tr></table></figure>

<p>第一台</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">restHost:</span> <span class="string">$&#123;SW_CORE_REST_HOST:0.0.0.0&#125;</span></span><br><span class="line"><span class="attr">restPort:</span> <span class="string">$&#123;SW_CORE_REST_PORT:12801&#125;</span></span><br><span class="line"><span class="attr">gRPCPort:</span> <span class="string">$&#123;SW_CORE_GRPC_PORT:11801&#125;</span></span><br><span class="line"><span class="attr">gRPCHost:</span> <span class="string">$&#123;SW_CORE_GRPC_HOST:0.0.0.0&#125;</span></span><br></pre></td></tr></table></figure>

<p>第二台</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">restHost:</span> <span class="string">$&#123;SW_CORE_REST_HOST:0.0.0.0&#125;</span></span><br><span class="line"><span class="attr">restPort:</span> <span class="string">$&#123;SW_CORE_REST_PORT:12802&#125;</span></span><br><span class="line"><span class="attr">gRPCPort:</span> <span class="string">$&#123;SW_CORE_GRPC_PORT:11802&#125;</span></span><br><span class="line"><span class="attr">gRPCHost:</span> <span class="string">$&#123;SW_CORE_GRPC_HOST:0.0.0.0&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-配置UI"><a href="#3-配置UI" class="headerlink" title="3.配置UI"></a>3.配置UI</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">listOfServers:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:12801,127.0.0.1:12802</span></span><br></pre></td></tr></table></figure>



<h3 id="4-启动-skywalking"><a href="#4-启动-skywalking" class="headerlink" title="4.启动 skywalking"></a>4.启动 skywalking</h3><p>启动两个以上oap，一个及以上UI</p>
<h3 id="5-程序启动"><a href="#5-程序启动" class="headerlink" title="5.程序启动"></a>5.程序启动</h3><h4 id="Jar包启动"><a href="#Jar包启动" class="headerlink" title="Jar包启动"></a>Jar包启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -javaagent:xxxxx/agent/skywalking-agent.jar</span><br><span class="line">-Dskywalking.agent.service_name=gateway</span><br><span class="line">-Dskywalking.collector.backend_service=192.168.172.128:11801,192.168.172.128:11802</span><br><span class="line">-jar 你的jar包名</span><br></pre></td></tr></table></figure>



<h4 id="IDEA启动"><a href="#IDEA启动" class="headerlink" title="IDEA启动"></a>IDEA启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SW_AGENT_COLLECTOR_BACKEND_SERVICES=192.168.172.128:11801,192.168.172.128:11802;SW_AGENT_NAME=11-springboot-idea</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>微服务</tag>
        <tag>中间件</tag>
        <tag>链路追踪</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOs7 安装 MySQL5.7</title>
    <url>/2022/11/10/CentOS7%E5%AE%89%E8%A3%85MySQL5.7/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一个没有坑的，在CentOS7环境下安装MySQL5.7的流程。</p>
<span id="more"></span>



<h2 id="在服务器上准备好mysql5-7的压缩包"><a href="#在服务器上准备好mysql5-7的压缩包" class="headerlink" title="在服务器上准备好mysql5.7的压缩包"></a>在服务器上准备好mysql5.7的压缩包</h2><p>注意针对不同的操作系统选择对应的包，我选择的是<code>mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz</code></p>
<h2 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz #解压</span><br><span class="line"></span><br><span class="line">mv mysql-5.7.26-linux-glibc2.12-x86_64 /usr/local/mysql #启动目录、重命名</span><br></pre></td></tr></table></figure>



<h2 id="创建mysql用户-组"><a href="#创建mysql用户-组" class="headerlink" title="创建mysql用户/组"></a>创建mysql用户/组</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/mysql</span><br><span class="line"></span><br><span class="line">mkdir data</span><br><span class="line"></span><br><span class="line">groupadd mysql</span><br><span class="line"></span><br><span class="line">useradd -g mysql mysql -s /sbin/nologin -d /usr/local/mysql</span><br><span class="line"></span><br><span class="line">chown -R mysql:mysql /usr/local/mysql #将mysql目录所属用户指定为mysql用户</span><br></pre></td></tr></table></figure>



<h2 id="初始化mysql"><a href="#初始化mysql" class="headerlink" title="初始化mysql"></a>初始化mysql</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure>

<p><font color=red>记住上面命令产生的临时密码，后面会用到。</font></p>
<h3 id="创建RSA-private-key："><a href="#创建RSA-private-key：" class="headerlink" title="创建RSA private key："></a>创建RSA private key：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/mysql_ssl_rsa_setup --datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure>



<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -rf /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql</span><br><span class="line"></span><br><span class="line">cp /etc/my.cnf /etc/my.cnf.bak</span><br><span class="line"></span><br><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure>

<p>配置文件写法</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#datadir=/var/lib/mysql:wq!</span></span><br><span class="line"><span class="comment">#socket=/var/lib/mysql/mysql.sock</span></span><br><span class="line"></span><br><span class="line"><span class="attr">character_set_server</span>=<span class="string">utf8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">basedir</span>=<span class="string">/usr/local/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">datadir</span>=<span class="string">/usr/local/mysql/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">port</span>=<span class="string">3306</span></span><br><span class="line"></span><br><span class="line"><span class="attr">socket</span>=<span class="string">/tmp/mysql.sock</span></span><br></pre></td></tr></table></figure>



<h2 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysql start 开启服务</span><br></pre></td></tr></table></figure>

<p>其他相关命令：</p>
<p>service mysql stop 停止服务</p>
<p>service mysql status 查看状态</p>
<p>service mysql restart 重启服务</p>
<h2 id="连接mysql并设置root密码"><a href="#连接mysql并设置root密码" class="headerlink" title="连接mysql并设置root密码"></a>连接mysql并设置root密码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/mysql/bin</span><br><span class="line"></span><br><span class="line">./mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>[输入临时密码,回车]</p>
<h3 id="设置root用户密码"><a href="#设置root用户密码" class="headerlink" title="设置root用户密码"></a>设置root用户密码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set password for &#x27;root&#x27;@&#x27;localhost&#x27; =password(&#x27;&lt;你的密码&gt;&#x27;);</span><br><span class="line"></span><br><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;&lt;你的密码&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">flush privileges ;</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></figure>



<h2 id="设置mysql服务自开机启动"><a href="#设置mysql服务自开机启动" class="headerlink" title="设置mysql服务自开机启动"></a>设置mysql服务自开机启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig mysql on</span><br></pre></td></tr></table></figure>



<h2 id="配置mysql环境变量"><a href="#配置mysql环境变量" class="headerlink" title="配置mysql环境变量"></a>配置mysql环境变量</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export MYSQL_HOME=/usr/local/mysql</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$MYSQL_HOME/bin</span><br></pre></td></tr></table></figure>

<p>:wq保存退出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile #使之立即生效</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>二分图相关算法</title>
    <url>/2022/12/27/%E4%BA%8C%E5%88%86%E5%9B%BE%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java实现二分图相关算法模板</p>
<ul>
<li>二分图的性质</li>
<li>染色法判断二分图</li>
<li>匈牙利算法计算二分图最佳匹配数</li>
</ul>
<span id="more"></span>



<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ol>
<li>可以把图中所有点分到两个集合，使只有集合之间存在边，集合内不存在边</li>
<li>推论：二分图不存在奇数环<ol>
<li>奇数环：由奇数个点构成的环</li>
</ol>
</li>
</ol>
<p><img src="https://gitee.com/luccas/figure-bed/raw/master/%E4%BA%8C%E5%88%86%E5%9B%BE%E7%AE%97%E6%B3%95.png"></p>
<h2 id="①-染色法判断二分图"><a href="#①-染色法判断二分图" class="headerlink" title="① 染色法判断二分图"></a>① 染色法判断二分图</h2><ol>
<li>对每个还没染色的点进行染色</li>
<li>以这个点为根节点，将其相邻的点染成另一个颜色，并对每个点递归这个操作</li>
<li>如果发现相邻的点颜色和自己相同，则无法构成二分图（奇数环充要条件）</li>
<li>如果递归发现某个相邻点的子图不能构成二分图，则该点及子图也不能构成二分图</li>
<li>本质使DFS，改用BFS也可以</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt;[] G;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] color;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">        color[u] = v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> e : G[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (color[e] == v) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (color[e] == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!dfs(e, v ^ <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), m = sc.nextInt();</span><br><span class="line">        G = <span class="keyword">new</span> <span class="title class_">List</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) G[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt(), b = sc.nextInt();</span><br><span class="line">            G[a].add(b);</span><br><span class="line">            G[b].add(a);</span><br><span class="line">        &#125;</span><br><span class="line">        color = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        Arrays.fill(color, -<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (color[i] == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!dfs(i, <span class="number">0</span>)) &#123;</span><br><span class="line">                    ans = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(ans ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="②-匈牙利算法（求二分图最大匹配）"><a href="#②-匈牙利算法（求二分图最大匹配）" class="headerlink" title="② 匈牙利算法（求二分图最大匹配）"></a>② 匈牙利算法（求二分图最大匹配）</h2><p>给定二分图，求可以成功配对的最大对数</p>
<ol>
<li>遍历左集合，如果每个节点能找到一个右节点，则计数+1</li>
<li>左节点通过遍历其相邻右节点来配对，如果其相邻右节点已经被匹配，尝试为该右节点匹配的原左节点寻找新的右节点，让自己得以匹配该右节点，如果无法帮它找到匹配的右节点，则查看下一个相邻的右节点</li>
<li>如果所有相邻右节点都无法匹配，就匹配失败</li>
<li>注意匹配过程的递归调用</li>
<li>每次遍历要重置右节点的标记，遍历右节点的过程中如果已经被标记，则跳过</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt;[] G;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] match;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] vis;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> e : G[x]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[e]) &#123;</span><br><span class="line">                vis[e] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (match[e] == <span class="number">0</span> || find(match[e])) &#123;</span><br><span class="line">                    match[e] = x;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> sc.nextInt(), n2 = sc.nextInt(), m = sc.nextInt();</span><br><span class="line">        G = <span class="keyword">new</span> <span class="title class_">List</span>[n1+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n1; i++) G[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        match = <span class="keyword">new</span> <span class="title class_">int</span>[n2+<span class="number">1</span>];</span><br><span class="line">        vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[n2+<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt(), b = sc.nextInt();</span><br><span class="line">            G[a].add(b);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">            Arrays.fill(vis, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (find(i)) res++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>几道典型的贪心问题</title>
    <url>/2022/12/27/%E5%87%A0%E9%81%93%E5%85%B8%E5%9E%8B%E7%9A%84%E8%B4%AA%E5%BF%83%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录几道经典的贪心问题</p>
<span id="more"></span>



<h2 id="区间问题（时间问题）"><a href="#区间问题（时间问题）" class="headerlink" title="区间问题（时间问题）"></a>区间问题（时间问题）</h2><h3 id="最少覆盖区间点数"><a href="#最少覆盖区间点数" class="headerlink" title="最少覆盖区间点数"></a>最少覆盖区间点数</h3><ol>
<li>将区间按右端点排序（左端点反过来同理）</li>
<li>从左到右遍历，每个区间要么不取点（已经被去过的点覆盖），要么一定取右端点（可以尽可能多的覆盖后面的点）</li>
<li>如果当前区间左端点 &lt; 上一区间右端点<ul>
<li>跳过，说明上个区间的右端点已经覆盖当前区间</li>
</ul>
</li>
<li>如果当前区间左端点 &gt;= 上一区间右端点，点数 + 1<ul>
<li>说明当前区间是一个新的范围，没有被前面任何点覆盖</li>
<li>要想覆盖这个点，一定要从这个点至少取一个点，为了尽可能多的覆盖后面的区间，取右端点</li>
</ul>
</li>
</ol>
<h3 id="最多不相交区间个数"><a href="#最多不相交区间个数" class="headerlink" title="最多不相交区间个数"></a>最多不相交区间个数</h3><p>和最少覆盖区间点数完全等价</p>
<ol>
<li>如果当前左端点 &lt; 上一区间右端点<ul>
<li> 跳过，两者已经相交</li>
</ul>
</li>
<li>如果当前左端点 &gt;= 上一区间右端点<ul>
<li>区间个数 + 1，说明拿到了一个新的没有被相交过的区间</li>
<li>因为已经选取了当前区间，所以下一次判断要用右端点判断是否重复</li>
<li>如果下一个区间和当前区间相交，绝对先选前面的，不选后面的，因为后面的区间只会比前面的区间覆盖掉的区间还要</li>
</ul>
</li>
</ol>
<h3 id="区间分组（活动安排问题、区间厚度）"><a href="#区间分组（活动安排问题、区间厚度）" class="headerlink" title="区间分组（活动安排问题、区间厚度）"></a>区间分组（活动安排问题、区间厚度）</h3><p>要求分组，每组中的区间两两不相交，求最小分组数</p>
<p>在若干教师中安排活动，同一个教室不能同一时间只能安排一个活动，问最少需要多少教师？</p>
<p>就是求同一个时间段，最多有几个教室在同时运作</p>
<ol>
<li>将活动开始时间和结束时间同时存入一个数组，将数组从小到大排序（时间从小到大）</li>
<li>离散化存储<ul>
<li>以偶数存储开始时间：开始时间 * 2</li>
<li>以奇数存储结束时间：结束时间 * 2 + 1</li>
</ul>
</li>
<li>遍历数组<ol>
<li>如果是开始时间，就把教室使用数量 + 1</li>
<li>如果是结束时间，就把教师使用数量 - 1</li>
<li>每次更新教室数量最大值</li>
</ol>
</li>
</ol>
<h3 id="区间覆盖"><a href="#区间覆盖" class="headerlink" title="区间覆盖"></a>区间覆盖</h3><p>在给定的区间[ai, bi]中选取最少的区间将目标区间[s, t]完全覆盖</p>
<p>按左端点ai排序，当多个区间左端点都小于s，取右端点最大的区间，尽可能多的覆盖目标区间</p>
<p>选定之后，将s更新为目标区间右端点，继续上述步骤</p>
<p>注意边界：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> sc.nextInt(), t = sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[][] seq = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            seq[i][<span class="number">0</span>] = sc.nextInt();</span><br><span class="line">            seq[i][<span class="number">1</span>] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(seq, (a, b) -&gt; a[<span class="number">0</span>] == b[<span class="number">0</span>] ? a[<span class="number">1</span>] - b[<span class="number">1</span>] : a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> s, max = s, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 右端点都小于起始点，跳过该区间</span></span><br><span class="line">            <span class="keyword">if</span> (seq[i][<span class="number">1</span>] &lt; l) <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 左端点小于起始点，取这些区间的右端点的最大值</span></span><br><span class="line">            <span class="keyword">if</span> (seq[i][<span class="number">0</span>] &lt;= l) max = Math.max(max, seq[i][<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">else</span> &#123;	<span class="comment">// 左端点大于起始点，该对上一组清算，并处理该区间对下一组计算的影响</span></span><br><span class="line">                cnt++;</span><br><span class="line">                l = max;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 处理该区间对下一组计算的影响</span></span><br><span class="line">                <span class="keyword">if</span> (l &gt;= t) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (seq[i][<span class="number">0</span>] &lt;= l &amp;&amp; seq[i][<span class="number">1</span>] &gt; max) max = seq[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果最后一组计算没有碰到左端点大于起始点的情况，防止漏算</span></span><br><span class="line">        <span class="keyword">if</span> (l &lt;= t) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            l = max;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(l &gt;= t ? cnt : -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="合并果子"><a href="#合并果子" class="headerlink" title="合并果子"></a>合并果子</h2><p>有重量不同的n堆果子，每次合并两个果子都会耗费与重量相同的力量，问将所有果子合并为一堆，耗费的最小力气是多少？</p>
<p>每次合并权值最小的两个果子。</p>
<h2 id="推公式"><a href="#推公式" class="headerlink" title="推公式"></a>推公式</h2><p><a href="https://www.acwing.com/solution/content/5943/">排队打水</a></p>
<p><a href="https://www.acwing.com/problem/content/description/106/">货仓选址（排序 + 中位数）</a></p>
<p><a href="https://www.acwing.com/problem/content/127/">耍杂技的牛</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>图的遍历、拓扑排序</title>
    <url>/2022/12/27/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86%E3%80%81%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java算法模板</p>
<ul>
<li>树与图的遍历</li>
<li>拓扑排序</li>
</ul>
<span id="more"></span>



<h2 id="图与树的遍历"><a href="#图与树的遍历" class="headerlink" title="图与树的遍历"></a>图与树的遍历</h2><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        dfs(<span class="number">0</span>, n, <span class="keyword">new</span> <span class="title class_">int</span>[n], <span class="keyword">new</span> <span class="title class_">boolean</span>[n+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> n, <span class="type">int</span>[] a, <span class="type">boolean</span>[] vis)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (idx == n) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">            vis[i] = <span class="literal">true</span>;</span><br><span class="line">            a[idx] = i;</span><br><span class="line">            dfs(idx + <span class="number">1</span>, n, a, vis);</span><br><span class="line">            vis[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="树的重心-DFS"><a href="#树的重心-DFS" class="headerlink" title="树的重心 DFS"></a>树的重心 DFS</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt;[] G;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] vis;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n, min;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        min = n = sc.nextInt();</span><br><span class="line">        G = <span class="keyword">new</span> <span class="title class_">List</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) G[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt(), b = sc.nextInt();</span><br><span class="line">            G[a].add(b);</span><br><span class="line">            G[b].add(a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(<span class="number">1</span>);</span><br><span class="line">        System.out.println(min);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> u)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> e : G[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[e]) &#123;</span><br><span class="line">                vis[e] = <span class="literal">true</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> dfs(e);</span><br><span class="line">                res = Math.max(res, s);</span><br><span class="line">                sum += s;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = Math.max(res, n - sum);</span><br><span class="line"></span><br><span class="line">        min = Math.min(min, res);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), m = sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[][] map = <span class="keyword">new</span> <span class="title class_">int</span>[n][m];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            map[i][j] = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        Queue&lt;<span class="type">int</span>[]&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt; ();</span><br><span class="line">        q.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[][] step = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span>[] p = q.poll();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] s : step) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">xx</span> <span class="operator">=</span> p[<span class="number">0</span>] + s[<span class="number">0</span>], yy = p[<span class="number">1</span>] + s[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (xx &lt; <span class="number">0</span> || yy &lt; <span class="number">0</span> || xx &gt;= n || yy &gt;= m || map[xx][yy] &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                map[xx][yy] = map[p[<span class="number">0</span>]][p[<span class="number">1</span>]] + <span class="number">1</span>;</span><br><span class="line">                q.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;xx, yy&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(map[n-<span class="number">1</span>][m-<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p>统计每个点入度即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), m = sc.nextInt();</span><br><span class="line">        List&lt;Integer&gt;[] G = <span class="keyword">new</span> <span class="title class_">List</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) G[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt(), b = sc.nextInt();</span><br><span class="line">            G[a].add(b);</span><br><span class="line">            d[b]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (d[i] == <span class="number">0</span>) q.add(i);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> q.poll();</span><br><span class="line">            ans.add(p);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> e : G[p]) &#123;</span><br><span class="line">                d[e]--;</span><br><span class="line">                <span class="keyword">if</span> (d[e] == <span class="number">0</span>) q.add(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans.size() != n) System.out.print(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (!ans.isEmpty())</span><br><span class="line">                System.out.print(ans.poll() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>基础算法（排序、二分等）</title>
    <url>/2022/12/27/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java语言算法模板。</p>
<p>内容包括</p>
<ul>
<li>排序（快排、归并）</li>
<li>二分</li>
<li>高精度</li>
<li>前缀和、差分</li>
<li>双指针</li>
<li>位运算</li>
<li>离散化</li>
</ul>
<span id="more"></span>

<h2 id="Java-快速输入"><a href="#Java-快速输入" class="headerlink" title="Java 快速输入"></a>Java 快速输入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throw</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> nextInt();</span><br><span class="line">        <span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> nextDouble();</span><br><span class="line">        </span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 快速输入</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">    <span class="keyword">static</span> <span class="type">StringTokenizer</span> <span class="variable">tokenizer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">while</span> (!tokenizer.hasMoreTokens()) &#123;</span><br><span class="line">            tokenizer = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(reader.readLine());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tokenizer.nextToken();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> a[l + r &gt;&gt; <span class="number">1</span>], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (a[++i] &lt; x);</span><br><span class="line">        <span class="keyword">while</span> (a[--j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">			<span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">            a[i] = a[j];</span><br><span class="line">            a[j] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    quickSort(a, l, j);</span><br><span class="line">    quickSort(a, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="例题：TopK问题（快搜）"><a href="#例题：TopK问题（快搜）" class="headerlink" title="例题：TopK问题（快搜）"></a>例题：TopK问题（快搜）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查找第k小的数（TopK问题）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">quickSearch</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> a[l];</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> a[l + r &gt;&gt; <span class="number">1</span>], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (a[++i] &lt; x);</span><br><span class="line">        <span class="keyword">while</span> (a[--j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">            a[i] = a[j];</span><br><span class="line">            a[j] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">sl</span> <span class="operator">=</span> j - l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= sl) <span class="keyword">return</span> quickSearch(a, l, j, k);</span><br><span class="line">    <span class="keyword">return</span> quickSearch(a, j + <span class="number">1</span>, r, k - sl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    mergeSort(a, l, mid);</span><br><span class="line">    mergeSort(a, mid + <span class="number">1</span>, r);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] tmp = <span class="keyword">new</span> <span class="title class_">int</span>[r - l + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt;= a[j]) tmp[k++] = a[i++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k++] = a[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k++] = a[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k++] = a[j++];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i++, j++) a[i] = tmp[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="例题：逆序对"><a href="#例题：逆序对" class="headerlink" title="例题：逆序对"></a>例题：逆序对</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + r &gt;&gt; <span class="number">1</span>, i = l, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] t = <span class="keyword">new</span> <span class="title class_">int</span>[r - l + <span class="number">1</span>];</span><br><span class="line">    <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> find(a, l, mid) + find(a, mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; a[j]) t[k++] = a[i++];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            t[k++] = a[j++];</span><br><span class="line">            ans += (mid - i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) t[k++] = a[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) t[k++] = a[j++];</span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i++, j++) a[i] = t[j];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol>
<li>定义区间性质</li>
<li>根据性质判断区间该如何移动<ul>
<li>l = mid ? mid +1</li>
<li>r = mid - 1 ? mid  </li>
</ul>
</li>
<li>根据移动情况选择合适的mid计算方法</li>
</ol>
<h3 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二分模板1 找左边界</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">bsearch1</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分模板2 找右边界</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">bsearch2</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="例题：数的范围"><a href="#例题：数的范围" class="headerlink" title="例题：数的范围"></a>例题：数的范围</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), q = sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) a[i] = sc.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (q-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = n-<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (a[mid] &lt; k) l = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> r = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (a[l] != k) System.out.println(<span class="string">&quot;-1 -1&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(l + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                l = <span class="number">0</span>; r = n-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (a[mid] &gt; k) r = mid - <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> l = mid;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(l);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a>浮点数二分</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">double</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line">        <span class="type">double</span> <span class="variable">l</span> <span class="operator">=</span> -<span class="number">10000</span>, r = <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">while</span> (r - l &gt;= <span class="number">1e-8</span>) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">mid</span> <span class="operator">=</span> (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (mid * mid * mid &lt; n) l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;%.6f&quot;</span>, l));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 高精度</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(String);</span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">add</span> <span class="operator">=</span> a.add(b);			<span class="comment">// +</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">sub</span> <span class="operator">=</span> a.subtract(b);		<span class="comment">// -</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">mul</span> <span class="operator">=</span> a.multiply(b);		<span class="comment">// *</span></span><br><span class="line">BigInteger[] div = a.divide(b);		<span class="comment">// ÷ div[0] 是整除数 div[1] 是取模数</span></span><br></pre></td></tr></table></figure>



<h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一维前缀和</span></span><br><span class="line">S[i] = a[<span class="number">1</span>] + a[<span class="number">2</span>] + ... a[i]</span><br><span class="line">a[l] + ... + a[r] = S[r] - S[l - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维前缀和</span></span><br><span class="line">S[i, j] = 第i行j列格子左上部分所有元素的和</span><br><span class="line">以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：</span><br><span class="line">S[x2, y2] - S[x1 - <span class="number">1</span>, y2] - S[x2, y1 - <span class="number">1</span>] + S[x1 - <span class="number">1</span>, y1 - <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一维差分</span></span><br><span class="line"><span class="comment">// 给区间[l, r]中的每个数加上c：</span></span><br><span class="line">B[l] += c, B[r + <span class="number">1</span>] -= c</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维差分</span></span><br><span class="line">给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：</span><br><span class="line">S[x1, y1] += c;</span><br><span class="line">S[x2 + <span class="number">1</span>, y1] -= c;</span><br><span class="line">S[x1, y2 + <span class="number">1</span>] -= c;</span><br><span class="line">S[x2 + <span class="number">1</span>, y2 + <span class="number">1</span>] += c</span><br></pre></td></tr></table></figure>



<h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本质是对算法的优化，将 O(n^2) 优化到 O(n)</span></span><br><span class="line">常见问题分类：</span><br><span class="line">    (<span class="number">1</span>) 对于一个序列，用两个指针维护一段区间</span><br><span class="line">    (<span class="number">2</span>) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">	<span class="keyword">while</span> (j &lt; i &amp;&amp; check(i, j)) j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// n的第k位</span></span><br><span class="line">n &gt;&gt; k &amp; <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x的从地位数的第一个1所代表的数</span></span><br><span class="line">lowbit(x) = x &amp; -x;</span><br><span class="line">lowbit(<span class="number">1010</span>) = <span class="number">10</span>;</span><br><span class="line">lowbit(<span class="number">101000</span>) = <span class="number">1000</span>;</span><br></pre></td></tr></table></figure>



<h2 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; alls; <span class="comment">// 存储所有待离散化的值</span></span><br><span class="line">alls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(alls));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分求出x对应的离散化的值, 找到第一个大于等于x的位置</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x, List&lt;Integer&gt; alls)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = alls.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (alls.get(mid) &gt;= x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r + <span class="number">1</span>; <span class="comment">// 映射到1, 2, ...n</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;<span class="type">int</span>[]&gt; merge(<span class="type">int</span>[][] segs) &#123;</span><br><span class="line">    Arrays.sort(segs, (a, b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> <span class="variable">st</span> <span class="operator">=</span> -<span class="number">2e9</span>, ed = -<span class="number">2e9</span>;</span><br><span class="line">    List&lt;<span class="type">int</span>[]&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] seg : segs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ed &lt; seg[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (st != -<span class="number">2e9</span>) res.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;st, ed&#125;);</span><br><span class="line">            st = seg[<span class="number">0</span>];</span><br><span class="line">            ed = seg[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> ed = Math.max(ed, seg[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (st != -<span class="number">2e9</span>) res.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;st, ed&#125;);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>基础算法</tag>
      </tags>
  </entry>
  <entry>
    <title>常见数据结构及对应算法</title>
    <url>/2022/12/27/%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E5%AF%B9%E5%BA%94%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>java实现常见数据结构</p>
<p>内容包括：</p>
<ul>
<li>链表（单链表、双链表）</li>
<li>栈、队列（单调栈、单调队列）</li>
<li>字符串（KMP、Trie、字符串hash、回文）</li>
<li>堆（增删查改、堆排序）</li>
<li>并查集（朴素、路径压缩）</li>
</ul>
<span id="more"></span>



<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="单链表-（数组模拟）"><a href="#单链表-（数组模拟）" class="headerlink" title="单链表 （数组模拟）"></a>单链表 （数组模拟）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> head, idx;	<span class="comment">// 头节点和使用的节点下标</span></span><br><span class="line"><span class="type">int</span>[] data = <span class="keyword">new</span> <span class="title class_">int</span>[N];	<span class="comment">// 数据</span></span><br><span class="line"><span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[N];	<span class="comment">// 指针</span></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    head = -<span class="number">1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表头插入一个数a</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    data[idx] = x;</span><br><span class="line">    next[idx] = head;</span><br><span class="line">    head = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将头节点删除</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">    head = next[head];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双链表（数组模拟）"><a href="#双链表（数组模拟）" class="headerlink" title="双链表（数组模拟）"></a>双链表（数组模拟）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置左右两个空节点，可以减少代码复杂度</span></span><br><span class="line"><span class="comment">// 左节点为0，右节点为1</span></span><br><span class="line"><span class="type">int</span>[] data = <span class="keyword">new</span> <span class="title class_">int</span>[N];	<span class="comment">// 数据</span></span><br><span class="line"><span class="type">int</span>[] l = <span class="keyword">new</span> <span class="title class_">int</span>[N];		<span class="comment">// 左指针</span></span><br><span class="line"><span class="type">int</span>[] r = <span class="keyword">new</span> <span class="title class_">int</span>[N];		<span class="comment">// 右指针</span></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    r[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在节点k的右边插入一个数x，左边插入同理</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">    data[idx] = x;</span><br><span class="line">    l[idx] = k;		r[idx] = r[k];</span><br><span class="line">    l[r[k]] = idx;	r[k] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点k</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">    l[r[k]] = l[k];</span><br><span class="line">    r[l[k]] = r[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="普通栈（数组模拟）"><a href="#普通栈（数组模拟）" class="headerlink" title="普通栈（数组模拟）"></a>普通栈（数组模拟）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] s = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line"><span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line">s[++top] = x;</span><br><span class="line"><span class="comment">// 弹出</span></span><br><span class="line">top--;</span><br><span class="line"><span class="comment">// 查看栈顶</span></span><br><span class="line">s[top];</span><br><span class="line"><span class="comment">// 判空</span></span><br><span class="line">top == -<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="单调栈（数组模拟）"><a href="#单调栈（数组模拟）" class="headerlink" title="单调栈（数组模拟）"></a>单调栈（数组模拟）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">	<span class="keyword">while</span> (top != -<span class="number">1</span> &amp;&amp; check(s[top], i)) top--;</span><br><span class="line">    s[++top] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="队列（数组模拟）"><a href="#队列（数组模拟）" class="headerlink" title="队列（数组模拟）"></a>队列（数组模拟）</h2><h3 id="普通队列"><a href="#普通队列" class="headerlink" title="普通队列"></a>普通队列</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] q = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line"><span class="type">int</span> <span class="variable">hh</span> <span class="operator">=</span> <span class="number">0</span>, tt = -<span class="number">1</span>;</span><br><span class="line"><span class="comment">// 向队尾插入</span></span><br><span class="line">q[++tt] = x;</span><br><span class="line"><span class="comment">// 队头弹出</span></span><br><span class="line">hh++;</span><br><span class="line"><span class="comment">// 对头的值</span></span><br><span class="line">q[hh];</span><br><span class="line"><span class="comment">// 判空</span></span><br><span class="line">hh &lt; tt</span><br></pre></td></tr></table></figure>

<h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] q = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line"><span class="type">int</span> <span class="variable">hh</span> <span class="operator">=</span> <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 向队尾插入一个数</span></span><br><span class="line">q[tt++] = x;</span><br><span class="line"><span class="keyword">if</span> (tt == N) tt = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 从队头弹出一个数</span></span><br><span class="line">hh++;</span><br><span class="line"><span class="keyword">if</span> (hh == N) hh = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 队头的值</span></span><br><span class="line">q[hh];</span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line">hh != tt</span><br></pre></td></tr></table></figure>

<h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">hh</span> <span class="operator">=</span> <span class="number">0</span>, tt = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; check_out(q[hh])) hh++;</span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; check(q[tt], i)) tt--;</span><br><span class="line">    q[++tt] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字串查找-KMP"><a href="#字串查找-KMP" class="headerlink" title="字串查找 KMP"></a>字串查找 KMP</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>[] s = <span class="keyword">new</span> <span class="title class_">char</span>[n];</span><br><span class="line"><span class="type">char</span>[] p = <span class="keyword">new</span> <span class="title class_">char</span>[m];</span><br><span class="line"><span class="type">int</span>[] ne = <span class="keyword">new</span> <span class="title class_">int</span>[m+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算next</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; p[i] != p[j+<span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (p[i] == p[j+<span class="number">1</span>]) j++;</span><br><span class="line">    ne[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[i] != p[j+<span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (s[i] == p[j+<span class="number">1</span>]) j++;</span><br><span class="line">    <span class="keyword">if</span> (j == n) &#123;</span><br><span class="line">        j = ne[j];</span><br><span class="line">        <span class="comment">// 匹配成功之后要做的事</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h3><h4 id="字符串统计"><a href="#字符串统计" class="headerlink" title="字符串统计"></a>字符串统计</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Trie</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    Trie[] tr = <span class="keyword">new</span> <span class="title class_">Trie</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">    <span class="comment">// 需要什么属性就加什么属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">Trie</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> s.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.tr[u] == <span class="literal">null</span>) node.tr[u] = <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">        node = node.tr[u];</span><br><span class="line">    &#125;</span><br><span class="line">    node.cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">query</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">Trie</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> s.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        node = node.tr[u];</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="异或对判断"><a href="#异或对判断" class="headerlink" title="异或对判断"></a>异或对判断</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) insert((a[i] = sc.nextInt()));</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) ans = Math.max(ans, query(a[i]));</span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Trie</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">        Trie[] tr = <span class="keyword">new</span> <span class="title class_">Trie</span>[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">t</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> x &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (t.tr[p] == <span class="literal">null</span>)</span><br><span class="line">                t.tr[p] = <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">            t = t.tr[p];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">t</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> x &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (t.tr[p^<span class="number">1</span>] != <span class="literal">null</span>) &#123;</span><br><span class="line">                res += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">                t = t.tr[p^<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> t = t.tr[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串hash"><a href="#字符串hash" class="headerlink" title="字符串hash"></a>字符串hash</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">BigInteger</span> <span class="variable">base</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">131</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="type">BigInteger</span> <span class="variable">mod</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">2</span>).pow(<span class="number">64</span>);</span><br><span class="line">    <span class="keyword">static</span> BigInteger[] s, p;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">char</span>[] cs;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n, m;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        cs = (<span class="string">&quot;.&quot;</span> + sc.next()).toCharArray();</span><br><span class="line">        s = <span class="keyword">new</span> <span class="title class_">BigInteger</span>[n+<span class="number">1</span>];</span><br><span class="line">        p = <span class="keyword">new</span> <span class="title class_">BigInteger</span>[n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        s[<span class="number">0</span>] = BigInteger.valueOf(<span class="number">0</span>);</span><br><span class="line">        p[<span class="number">0</span>] = BigInteger.valueOf(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            s[i] = s[i-<span class="number">1</span>].multiply(base)</span><br><span class="line">                    .add(BigInteger.valueOf(cs[i] - <span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">                    .add(mod).mod(mod);</span><br><span class="line">            p[i] = p[i-<span class="number">1</span>].multiply(base);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">l1</span> <span class="operator">=</span> sc.nextInt(), r1 = sc.nextInt(), l2 = sc.nextInt(), r2 = sc.nextInt();</span><br><span class="line">            System.out.println(get(l1, r1).equals(get(l2, r2)) ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> BigInteger <span class="title function_">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s[r].subtract(s[l-<span class="number">1</span>].multiply(p[r-l+<span class="number">1</span>])).add(mod).mod(mod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="最长回文长度-Manacher"><a href="#最长回文长度-Manacher" class="headerlink" title="最长回文长度 Manacher"></a>最长回文长度 Manacher</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">manacher</span><span class="params">(<span class="type">char</span>[] cs)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加占位符去除长度奇偶性影响</span></span><br><span class="line">    sb.append(<span class="string">&#x27;$&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : cs) sb.append(<span class="string">&#x27;#&#x27;</span>).append(c);</span><br><span class="line">    sb.append(<span class="string">&quot;#@&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 长度改变</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> cs.length * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    cs = sb.toString().toCharArray();</span><br><span class="line">    <span class="comment">// maxv 最右回文串有边界， pos 最右回文串对称中心</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxv</span> <span class="operator">=</span> <span class="number">0</span>, pos = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// length[i] 以i为对称中心，最长的回文半径，如abcba 回文半径3</span></span><br><span class="line">    <span class="type">int</span>[] length = <span class="keyword">new</span> <span class="title class_">int</span>[cs.length];</span><br><span class="line">    <span class="comment">// 从1开始，因为 `abc` 已经编变成 `$#a#b#c$@`</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">        <span class="comment">// i 位于maxv左侧，取 length[j] 和，maxv - i 最值</span></span><br><span class="line">        <span class="comment">// i 位于maxv右侧，保守估计，半径为1</span></span><br><span class="line">        length[i] = (maxv &gt; i ? Math.min(length[<span class="number">2</span> * pos - i], maxv - i) : <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 尝试中心扩展</span></span><br><span class="line">        <span class="keyword">while</span> (cs[i - length[i]] == cs[i + length[i]]) length[i]++;</span><br><span class="line">        <span class="comment">// 取最值</span></span><br><span class="line">        ans = Math.max(ans, length[i]);</span><br><span class="line">        <span class="comment">// 更新最右侧回文串</span></span><br><span class="line">        <span class="keyword">if</span> (length[i] + i &gt; maxv) &#123;</span><br><span class="line">            maxv = length[i] + i;</span><br><span class="line">            pos = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 处理过后的回文串半径刚好为原串的半径 + 1</span></span><br><span class="line">    <span class="keyword">return</span> ans - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), m = sc.nextInt();</span><br><span class="line">        h = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        size = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) h[i] = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n / <span class="number">2</span>; i &gt; <span class="number">0</span>; i--) down(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            System.out.print(h[<span class="number">1</span>] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            h[<span class="number">1</span>] = h[size--];</span><br><span class="line">            down(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] h;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> h[a]; h[a] = h[b]; h[b] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">down</span><span class="params">(<span class="type">int</span> u)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> u;</span><br><span class="line">        <span class="keyword">if</span> (u * <span class="number">2</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t]) t = u * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (u * <span class="number">2</span> + <span class="number">1</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (t != u) &#123;</span><br><span class="line">            swap(u, t);</span><br><span class="line">            down(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="堆模拟"><a href="#堆模拟" class="headerlink" title="堆模拟"></a>堆模拟</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1</span></span><br><span class="line"><span class="comment">// ph[k]存储第k个插入的点在堆中的位置</span></span><br><span class="line"><span class="comment">// hp[k]存储堆中下标是k的点是第几个插入的</span></span><br><span class="line"><span class="type">int</span>[] h = <span class="keyword">new</span> <span class="title class_">int</span>[N], hp = <span class="keyword">new</span> <span class="title class_">int</span>[N], ph = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    t = h[a]; h[a] = h[b]; h[b] = t;</span><br><span class="line">    t = ph[hp[a]]; ph[hp[a]] = ph[hp[b]]; ph[hp[b]] = t;</span><br><span class="line">    t = hp[a]; hp[a] = hp[b]; hp[b] = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下称</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">down</span><span class="params">(<span class="type">int</span> u)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> u;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t]) t = u * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> + <span class="number">1</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (t != u) &#123;</span><br><span class="line">        swap(t, u);</span><br><span class="line">        down(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上浮</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">up</span><span class="params">(<span class="type">int</span> u)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (u / <span class="number">2</span> &gt; <span class="number">0</span> &amp;&amp; h[u / <span class="number">2</span>] &gt; h[u]) &#123;</span><br><span class="line">        swap(u, u / <span class="number">2</span>);</span><br><span class="line">        u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line">size++;</span><br><span class="line">m++;</span><br><span class="line">h[size] = sc.nextInt();</span><br><span class="line">ph[m] = size;</span><br><span class="line">hp[size] = m;</span><br><span class="line">up(size);</span><br><span class="line"><span class="comment">// 获取堆顶</span></span><br><span class="line">h[<span class="number">1</span>];</span><br><span class="line"><span class="comment">// 删除堆顶</span></span><br><span class="line">swap(<span class="number">1</span>, size--);</span><br><span class="line">down(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 删除第k个插入的元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">posk</span> <span class="operator">=</span> ph[k];</span><br><span class="line">swap(posk, size--);</span><br><span class="line">down(posk);</span><br><span class="line">up(posk);</span><br><span class="line"><span class="comment">// 修改第k个元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> sc.nextInt(), x = sc.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">posk</span> <span class="operator">=</span> ph[k];</span><br><span class="line">h[posk] = x;</span><br><span class="line">down(posk);</span><br><span class="line">up(posk);</span><br></pre></td></tr></table></figure>



<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p><strong>朴素</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (x != fa[x]) x = fa[x];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    fa[find(a)] = find(b);</span><br><span class="line">    <span class="comment">// 统计连通块包含元素个数</span></span><br><span class="line">    <span class="comment">// ab顺序和上面相反</span></span><br><span class="line">    <span class="comment">// size[find(b)] = find(a);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>例题 食物链</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] p, d;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), k = sc.nextInt();</span><br><span class="line">        p = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        d = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) p[i] = i;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (k-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">D</span> <span class="operator">=</span> sc.nextInt(), x = sc.nextInt(), y = sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (x &gt; n || y &gt; n) ans++;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">px</span> <span class="operator">=</span> find(x), py = find(y);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (D == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (px == py &amp;&amp; ((d[x] - d[y]) % <span class="number">3</span>) != <span class="number">0</span>) ans++;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (px != py) &#123;</span><br><span class="line">                        p[px] = py;</span><br><span class="line">                        d[px] = d[y] - d[x];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (px == py &amp;&amp; ((d[x] - d[y] - <span class="number">1</span>) % <span class="number">3</span>) != <span class="number">0</span>) ans++;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (px != py) &#123;</span><br><span class="line">                        p[px] = py;</span><br><span class="line">                        d[px] = d[y] - d[x] + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x != p[x]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> find(p[x]);</span><br><span class="line">            d[x] += d[p[x]];</span><br><span class="line">            p[x] = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>最小生成树算法</title>
    <url>/2022/12/27/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java实现最小生成树算法模板</p>
<p>时间复杂度参数意义：N个点，M条边</p>
<ul>
<li>Prim 算法 O(N^2)【点基准、用于一般图】</li>
<li>Kruskal O(MlogM)【边基准、用于稀疏图】</li>
</ul>
<span id="more"></span>



<h2 id="①-Prim"><a href="#①-Prim" class="headerlink" title="① Prim"></a>① Prim</h2><ol>
<li>查找从距离生成树最近的点</li>
<li>更新每个点到集合的距离</li>
<li>由于每次遍历只有新加入的点才会更新其周围的点到生成树的距离，所以找到点后遍历其周围的点即可</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), m = sc.nextInt();</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt;[] G =  <span class="keyword">new</span> <span class="title class_">List</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) G[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt(), b = sc.nextInt(), w = sc.nextInt();</span><br><span class="line">            G[a].add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;b, w&#125;);</span><br><span class="line">            G[b].add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;a, w&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] dis = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dis, <span class="number">0x3f3f3f3f</span>);</span><br><span class="line">        dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span>[] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">1</span>; t &lt;= n; t++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!vis[t] &amp;&amp; (x == -<span class="number">1</span> || dis[t] &lt; dis[x]))</span><br><span class="line">                    x = t;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (dis[x] == <span class="number">0x3f3f3f3f</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ans += dis[x];</span><br><span class="line">            vis[x] = <span class="literal">true</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] e : G[x]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> e[<span class="number">0</span>], len = e[<span class="number">1</span>];</span><br><span class="line">                dis[y] = Math.min(dis[y], len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="②-Kruskal"><a href="#②-Kruskal" class="headerlink" title="② Kruskal"></a>② Kruskal</h2><ol>
<li>将所有边按权重从小到大排序</li>
<li>遍历每条边，使用并查集查看是否在同一个集合<ul>
<li>如果在，跳过</li>
<li>如果不在，则将两者合并，表示将该点加入生成树</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] p;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (x != p[x]) x = p[x] = p[p[x]];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), m = sc.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[][] es = <span class="keyword">new</span> <span class="title class_">int</span>[m][<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                es[i][j] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(es, (a, b) -&gt; a[<span class="number">2</span>] - b[<span class="number">2</span>]);</span><br><span class="line">        </span><br><span class="line">        p = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) p[i] = i;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] e : es) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> find(e[<span class="number">0</span>]), b = find(e[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (a != b) &#123;</span><br><span class="line">                p[a] = b;</span><br><span class="line">                cnt++;</span><br><span class="line">                ans += e[<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (cnt &lt; n - <span class="number">1</span>) System.out.print(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.print(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>最短路算法</title>
    <url>/2022/12/27/%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java实现最短路算法模板</p>
<p>时间复杂度参数意义：N个点，M条边</p>
<ul>
<li>多源最短路：Floyd O(N^3)</li>
<li>单源最短路<ul>
<li>全是正边权<ul>
<li>朴素 Dijkstra O(N^2)</li>
<li>堆优化 Dijkstra O(MlogN)</li>
</ul>
</li>
<li>存在负边权<ul>
<li>Bellman-Ford O(NM)【特殊问题：要求k步之内到达终点】</li>
<li>SPFA O(NM)【平均O(M)】</li>
</ul>
</li>
</ul>
</li>
</ul>
<span id="more"></span>



<h2 id="①-Floyd算法-多源"><a href="#①-Floyd算法-多源" class="headerlink" title="① Floyd算法 (多源)"></a>① Floyd算法 (多源)</h2><p>松弛思想</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), m = sc.nextInt(), k = sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[][] map = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            Arrays.fill(map[i], <span class="number">0x3f3f3f3f</span>);</span><br><span class="line">            <span class="comment">// 注意点1：每个点到它本身距离为0</span></span><br><span class="line">            map[i][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt(), b = sc.nextInt(), w = sc.nextInt();</span><br><span class="line">            <span class="comment">// 注意点2：可能有重边（两个点之间有多个边）</span></span><br><span class="line">            map[a][b] = Math.min(map[a][b], w);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">1</span>; t &lt;= n; t++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                    map[i][j] = Math.min(map[i][j], map[i][t] + map[t][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt(), b = sc.nextInt();</span><br><span class="line">            <span class="comment">// 注意点3：有负边权，注意范围 &gt; 0x3f3f3f3f / 2</span></span><br><span class="line">            <span class="keyword">if</span> (map[a][b] &gt; <span class="number">0x3f3f3f3f</span> / <span class="number">2</span>) System.out.println(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> System.out.println(map[a][b]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="②-Dijkstra（无负权边）"><a href="#②-Dijkstra（无负权边）" class="headerlink" title="② Dijkstra（无负权边）"></a>② Dijkstra（无负权边）</h2><ol>
<li>找到从起点出发最近的点</li>
<li>使用该点更新从起点到其他点的距离</li>
<li>本质是贪心 + BFS</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), m = sc.nextInt();</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt;[] G = <span class="keyword">new</span> <span class="title class_">List</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) G[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt(), b = sc.nextInt(), v = sc.nextInt();</span><br><span class="line">            G[a].add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;b, v&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] dis = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="type">boolean</span>[] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dis, <span class="number">0x3f3f3f3f</span>);</span><br><span class="line">        dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">1</span>; y &lt;= n; y++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!vis[y] &amp;&amp; (x == -<span class="number">1</span> || dis[y] &lt; dis[x]))</span><br><span class="line">                    x = y;</span><br><span class="line">            &#125;</span><br><span class="line">            vis[x] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] e : G[x]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">to</span> <span class="operator">=</span> e[<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> e[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (dis[to] &gt; dis[x] + len)</span><br><span class="line">                    dis[to] = dis[x] + len;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(dis[n] == <span class="number">0x3f3f3f3f</span> ? -<span class="number">1</span> : dis[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="③-Dijkstra-优先队列优化（稀疏图）"><a href="#③-Dijkstra-优先队列优化（稀疏图）" class="headerlink" title="③ Dijkstra 优先队列优化（稀疏图）"></a>③ Dijkstra 优先队列优化（稀疏图）</h2><ol>
<li>使用优先队列优化 “查找从起点出发最近的点” 这一步骤</li>
<li>队列中可能存在冗余，使用vis标记判断</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), m = sc.nextInt();</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt;[] G = <span class="keyword">new</span> <span class="title class_">List</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) G[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt(), b = sc.nextInt(), v = sc.nextInt();</span><br><span class="line">            G[a].add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;b, v&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] dis = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dis, <span class="number">0x3f3f3f3f</span>);</span><br><span class="line">        dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span>[] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; q = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; a[<span class="number">1</span>] - b[<span class="number">1</span>]);</span><br><span class="line">        q.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span>[] p = q.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> p[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (vis[x]) <span class="keyword">continue</span>;</span><br><span class="line">            vis[x] = <span class="literal">true</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] e : G[x]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">to</span> <span class="operator">=</span> e[<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> e[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (dis[to] &gt; dis[x] + len) &#123;</span><br><span class="line">                    dis[to] = dis[x] + len;</span><br><span class="line">                    q.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;to, dis[to]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(dis[n] == <span class="number">0x3f3f3f3f</span> ? -<span class="number">1</span> : dis[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="④-Bellman-Ford算法-（负权边）"><a href="#④-Bellman-Ford算法-（负权边）" class="headerlink" title="④ Bellman-Ford算法 （负权边）"></a>④ Bellman-Ford算法 （负权边）</h2><ol>
<li>松弛思想</li>
<li>循环k次，每次遍历遍历所有边，判断是否能使用改边松弛起点和终点的距离</li>
<li>k的意义是不超过k步可以从起点到终点</li>
</ol>
<p><strong>基础写法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">INF</span> <span class="operator">=</span> Integer.MAX_VALUE / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> Bellman-Ford() &#123;</span><br><span class="line">    <span class="type">int</span>[] dis = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    Arrays.fill(dis, INF);</span><br><span class="line">    dis[k] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 核心代码</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; times.length; j++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> e[j][<span class="number">0</span>], b = e[j][<span class="number">1</span>], w = e[j][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span> (dis[b] &gt; dis[a] + w) &#123;</span><br><span class="line">                dis[b] = dis[a] + w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>特殊题型（限制在k步之内【k小于点数，否则说明有环】）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), m = sc.nextInt(), k = sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[][] e = <span class="keyword">new</span> <span class="title class_">int</span>[m][<span class="number">3</span>]; <span class="comment">// e[i] = &#123;a, b, w&#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                e[i][j] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] dis = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dis, <span class="number">0x3f3f3f3f</span>);</span><br><span class="line">        dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="comment">// 不同点1：需要备份，否则同一个循环中的dis可能会相互影响</span></span><br><span class="line">            <span class="type">int</span>[] old = Arrays.copyOf(dis, n + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> e[j][<span class="number">0</span>], b = e[j][<span class="number">1</span>], w = e[j][<span class="number">2</span>];</span><br><span class="line">                <span class="keyword">if</span> (dis[b] &gt; old[a] + w) &#123;</span><br><span class="line">                    dis[b] = old[a] + w;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 不同点2，可能存在负边，所以需要特判 dis[n] &gt; 0x3f3f3f3f / 2</span></span><br><span class="line">        <span class="keyword">if</span> (dis[n] &gt; <span class="number">0x3f3f3f3f</span> / <span class="number">2</span>) System.out.print(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.print(dis[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="⑤-SPFA算法"><a href="#⑤-SPFA算法" class="headerlink" title="⑤ SPFA算法"></a>⑤ SPFA算法</h2><ol>
<li>是 Bellman-Ford 算法使用队列优化的结果</li>
<li>根据 bellman-ford 只有 dis 改变，才会引起其他dis的改变</li>
<li>所以使用队列存储发生变化的 dis，也就是从起点触发最短距离发生变化的点</li>
<li>如果已经存储过就不会再存储，使用一个vis数组标记，当从队列取出时，需要取消标记</li>
</ol>
<p><strong>朴素写法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), m = sc.nextInt();</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt;[] G = <span class="keyword">new</span> <span class="title class_">List</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) G[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt(), b = sc.nextInt(), w = sc.nextInt();</span><br><span class="line">            G[a].add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;b, w&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] dis = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dis, <span class="number">0x3f3f3f3f</span>);</span><br><span class="line">        dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span>[] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        vis[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        q.add(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> q.poll();</span><br><span class="line">            <span class="comment">// 如果去除，就取消标记</span></span><br><span class="line">            vis[x] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] e : G[x]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> e[<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> e[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (dis[y] &gt; dis[x] + len) &#123;</span><br><span class="line">                    dis[y] = dis[x] + len;</span><br><span class="line">                    <span class="comment">// 如果已经加入过队列，就不再加入</span></span><br><span class="line">                    <span class="keyword">if</span> (!vis[y]) &#123;</span><br><span class="line">                        vis[y] = <span class="literal">true</span>;</span><br><span class="line">                        q.add(y);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (dis[n] &gt; <span class="number">0x3f3f3f3f</span> / <span class="number">2</span>) System.out.print(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.print(dis[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>判断负环</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(), m = sc.nextInt();</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt;[] G = <span class="keyword">new</span> <span class="title class_">List</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) G[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> sc.nextInt(), y = sc.nextInt(), w = sc.nextInt();</span><br><span class="line">            G[x].add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;y, w&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] dis = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="type">boolean</span>[] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            vis[i] = <span class="literal">true</span>;</span><br><span class="line">            q.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> q.poll();</span><br><span class="line">            vis[x] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] e : G[x]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> e[<span class="number">0</span>], len = e[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (dis[y] &gt; dis[x] + len) &#123;</span><br><span class="line">                    dis[y] = dis[x] + len;</span><br><span class="line">                    cnt[y] = cnt[x] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (cnt[y] &gt;= n) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[y]) &#123;</span><br><span class="line">                        vis[y] = <span class="literal">true</span>;</span><br><span class="line">                        q.add(y);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>图论</tag>
      </tags>
  </entry>
</search>
